(ns reservation-app.server  (:require   [clojure.pprint :as pprint]   [clojure.spec.alpha :as s]   [reitit.coercion.spec]   [reservation-app.db :refer [db]]   [reservation-app.db.bootstrap :as dbfns]   [reservation-app.specs :as specs]   [buddy.hashers :as hashers]   [buddy.sign.jwt :as jwt]   [reitit.swagger :as swagger]   [reitit.swagger-ui :as swagger-ui]   [ring.middleware.cookies :refer [wrap-cookies]]   [ring.middleware.params :refer [wrap-params]]   [ring.middleware.keyword-params :refer [wrap-keyword-params]]   [reitit.ring.middleware.muuntaja :as muuntaja]   [muuntaja.core :as m]   [reitit.ring.coercion :as coercion]   [reitit.ring :as ring]   [tick.core :as t]));http://localhost:3000/api-docs/index.html(def signing-secret "ycpOKsMw+SpDuRpYl34GGHVDnW9or6Cvf0zGy+J8iCzCnd9YtbWUnuh8bjTRoZqh3U0yP9wwJ6URRU3ammWx11RGWN3q5o3Gq5jutuddIUtBeNVEYY/VB92SMX0vZO0jLrLSTXf249SNY4VVL+VdPDyJXuVlYKLfc/ORXgeNOeg")(def max-page-limit 5);(create-ns 'reservation-app.person);(create-ns 'reservation-app.booking);(alias 'person-spec 'reservation-app.person);(alias 'booking-spec 'reservation-app.booking)(defn get-error-fields [spec data]  (->> (s/explain-data spec data)       :clojure.spec.alpha/problems       (mapv :in)       (mapv #(mapv name %))))(def user-routes  [["" {:swagger {:tags [:Person]}        :coercion reitit.coercion.spec/coercion}    ["/user/log-in"     {:post {:summary "Log in"             :swagger {:operationId :log-in-post}             :parameters {:body :person-spec/log-in-post}             :handler (fn [{{:keys [email password mobile-phone]} :body-params}]                        (let [person (if (some? email)                                       (dbfns/person-by-email db {:email email})                                       (if (some? mobile-phone)                                         (dbfns/person-by-email db {:mobile-phone mobile-phone})                                         nil))                              sub-person (select-keys person [:id                                                              :first-name                                                              :last-name                                                              :email                                                              :mobile-phone])                              formatter (t/formatter "E, dd MMM yyyy HH:mm:ss z")                              token-expiry (t/format formatter (-> (t/>> (t/instant (t/now))                                                                         (t/new-duration 10 :minutes))                                                                   (t/in "GMT")))]                          (if (and (some? person)                                   (-> password                                       (hashers/verify (:password person))                                       :valid))                            {:status 200                             :body {:status 200                                    :body (merge sub-person                                                 {:auth-token (jwt/sign                                                               (assoc sub-person :expiry token-expiry)                                                               signing-secret)                                                  :expiry token-expiry})}}                            {:status 422                             :body {:status 422                                    :message "Malformed entity"                                    :error-fields (get-error-fields :person-spec/person person)}})))}}]]])(def person-routes  [["" {:swagger {:tags [:Person]}        :coercion reitit.coercion.spec/coercion}    ["/person"     {:post {:summary "Create Person"             :swagger {:operationId :person-post}             :parameters {:body :person-spec/person-create}             :handler (fn [{person-post :body-params}]                        (print "Person POST")                        (clojure.pprint/pprint person-post)                        (let [password-hash (hashers/derive (person-post :password1))                              person (merge person-post {:can-log-in false                                                         :verified false                                                         :deleted false                                                         :password password-hash})]                          (if (s/valid? :person-spec/person-create person-post)                            (do (dbfns/insert-person db person)                                {:status 201 #_created                                 :body {:test "test"}})                            {:status 422                             :body {:status 422                                    :message "Malformed entity"                                    :error-fields (get-error-fields :person-spec/person person)}})))};curl -X GET -vvv 'http://localhost:3000/person?limit=5&page=1'      :get {:summary "Get Person List"            :swagger {:operationId :person-list}            :responses {200 {:body (s/coll-of :person-spec/person)}}            :parameters {:query (s/keys :req-un [::specs/page ::specs/limit])}            :handler (fn [{{{:keys [page limit]} :query} :parameters}]                       (let [persons (dbfns/list-person db {:limit limit                                                            :offset (-> page (- 1) (* limit))})]                         {:status (if (empty? persons) 204 200)                          :body persons}))}}]    ["/person/:person-id"     {:put {:summary "Update Person"            :swagger {:operationId :person-put}            :parameters {:path {:person-id :person-spec/id}                         :body :person-spec/person-update}            :coercion reitit.coercion.spec/coercion            :handler (fn [{person :body-params                           {:keys [person-id]} :path-params}]                       (if (s/valid? :person-spec/person-update person)                         (do                           (dbfns/clj-expr-generic-update                            db {:table "person"                                :updates (select-keys person [:first-name                                                              :last-name                                                              :post-code])                                :id person-id})                           {:status 200                            :body {:test "test"}})                         {:status 422                          :body {:status 422                                 :message "Malformed entity"                                 :error-fields (get-error-fields :person-spec/person person)}}))}      :get {:summary "Get Person Resource"            :swagger {:operationId :person-get}            :parameters {:path ::specs/path-params}            :responses {200 {:body :person-spec/person}                        404 {:body string?}}            :handler (fn [{{{:keys [person-id]} :path} :parameters}]                       (let [person (dbfns/person-by-id db {:id person-id})]                         (cond                           (nil? person) {:status 404 :body "404 Not Found"}                           ;TODO handle DB connection issues                           (s/valid? :person-spec/person person) {:status 200 :body person})))}}]    ["/person/:person-id/password"     {:put {:summary "Change Password"            :swagger {:operationId :person-password-put}            :parameters {:path {:person-id :person-spec/id}                         :body :person-spec/person-password-update}            :coercion reitit.coercion.spec/coercion            :handler (fn [{{:keys [password1 password2 otp old-password] :as passwords} :body-params                           {:keys [person-id]} :path-params}]                       (let [person (dbfns/person-by-id db {:id person-id})]                         (if (and (= password1 password2)                                  (some? person)                                  (or (and (some? otp)                                           (-> otp                                               (hashers/verify (:otp person))                                               :valid))                                      (and (some? old-password)                                           (-> old-password                                               (hashers/verify (:password person))                                               :valid))))                           (do                             (dbfns/clj-expr-generic-update                              db {:table "person"                                  :updates {:password (hashers/derive password1)}                                  :id person-id})                             {:status 200                              :body {:test "test"}})                           {:status 422                            :body {:status 422                                   :message "Malformed entity"                                   :error-fields (get-error-fields :person-spec/person person)}})))}}]    ["/person/password/reset-request"     {:post {:summary "Password reset request"             :swagger {:operationId :person-password-reset}             :parameters {:body :person-spec/person-password-reset}             :coercion reitit.coercion.spec/coercion             :handler (fn [{{:keys [email mobile-phone]} :body-params}]                        (let [otp (str (java.util.UUID/randomUUID))                              person (if (some? email)                                       (dbfns/person-by-email db {:email email})                                       (if (some? mobile-phone)                                         (dbfns/person-by-email db {:mobile-phone mobile-phone})                                         nil))]                          (println otp)                          (if (some? person)                            (do                              (dbfns/clj-expr-generic-update                               db {:table "person"                                   :updates {:otp (hashers/derive otp)}                                   :id (:id person)})                              (if (some? email)                                (println :todo :email)                                (when (some? mobile-phone)                                  (println :todo :mobile-phone)))                              {:status 202                               :body {:test "test"}})                            {:status 422                             :body {:status 422                                    :message "Malformed entity"                                    :error-fields (get-error-fields :person-spec/person person)}})))}}]]])(def calendar-routes  [["" {:swagger {:tags [:Person]}        :coercion reitit.coercion.spec/coercion}    ["/calendar/booking-request"     {:post {:summary "Create Booking Request"             :swagger {:operationId :booking-request-post}             :parameters {:body :booking-spec/booking-request-post}             :handler (fn [{booking-request-post :body-params                            user :custom-auth}]                        (let [booking-request (-> booking-request-post                                                  (assoc :requested-by (:id user))                                                  (assoc :approved-by nil)                                                  (assoc :status "CREATED"))]                          (if (s/valid? :booking-spec/booking-request-post booking-request-post)                            (do                              (dbfns/insert-appointment-request db booking-request) ;TODO naming consistency                              {:status 201 #_created                               :body {:test "test"}})                            {:status 422                             :body {:status 422                                    :message "Malformed entity"                                    :error-fields (get-error-fields :booking-spec/booking-request booking-request)}})))}     :get {:summary "Get Booking Request List"           :swagger {:operationId :booking-request-list}           :responses {200 {:body (s/coll-of :booking-spec/booking-request)}}           :parameters {:query (s/keys :req-un [::specs/from-date ::specs/to-date])}           :handler (fn [{{{:keys [from-date to-date]} :query} :parameters}] ;todo limit duration                      (let [booking-requests (dbfns/list-booking-request db {:from-date (str from-date)                                                                             :to-date (str to-date)})];                        (clojure.pprint/pprint booking-requests)                        {:status (if (empty? booking-requests) 204 200)                         :body (map (fn [b] (update b :apt-date #(-> % str (subs 0 10)))) ;TODO handle dates properly                                    booking-requests)                                   }))}}]]])(def swagger-routes  ["" {:no-doc true}   ["/swagger.json" {:get (swagger/create-swagger-handler)}]   ["/api-docs/*" {:get (swagger-ui/create-swagger-ui-handler)}]])(defn wrap-custom-auth [handler]  (fn [request]    (let [auth-token (get-in request [:cookies "auth-token" :value])]      (handler (if (some? auth-token)                 (assoc request :custom-auth (jwt/unsign auth-token signing-secret))                 request)))))(def app  (ring/ring-handler   (ring/router    [person-routes     user-routes     calendar-routes     swagger-routes]    {:data {:muuntaja m/instance            :middleware [wrap-params                         wrap-cookies                         wrap-keyword-params                         wrap-custom-auth                         muuntaja/format-middleware                         coercion/coerce-exceptions-middleware                         coercion/coerce-request-middleware                         coercion/coerce-response-middleware]}})   (ring/create-default-handler)));curl -X POST http://localhost:3000/person \;-H 'Content-Type: application/json' \;-d '{"deleted":false,"email":"manawardhana@gmail.com","last-name":"Manawardhana","post-code":"2077","mobile-phone":"0457925280","password1":"secret","password2":"secret","can-log-in":false,"first-name":"Tharaka","id":1,"created-at":"2022-07-10T13:09:45Z","verified":true} ';curl -X PUT http://localhost:3000/person/1 \;-H 'Content-Type: application/json' \;-d '{"deleted":false,"email":"manawardhana+1@gmail.com","last-name":"Manawardhana","post-code":"2000","mobile-phone":"0457925280","password1":"secret1","password2":"secret1","can-log-in":false,"first-name":"Tharaka","created-at":"2022-07-10T13:09:45Z","verified":true} ';curl -X PUT http://localhost:3000/person/1/password \;-H 'Content-Type: application/json' \;-d '{"password1":"secret111","password2":"secret111","otp":"162d65bc-638b-4dd7-af7d-6cdd21481445"}';curl -X POST http://localhost:3000/person/password/reset-request \;-H 'Content-Type: application/json' \;-d '{"email":"manawardhana@gmail.com"}';curl -X POST http://localhost:3000/person/password/reset-request \;-H 'Content-Type: application/json' \;-d '{"mobile-phone":"0457925280"}';curl -X POST http://localhost:3000/user/log-in \;-H 'Content-Type: application/json' \;-d '{"email":"manawardhana@gmail.com", "password":"secret111"}';curl -X POST http://localhost:3000//calendar/booking-request \;-H 'Cookie: auth-token=eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MiwiZmlyc3QtbmFtZSI6IlRoYXJha2ExIiwibGFzdC1uYW1lIjoiTWFuYXdhcmRoYW5hMSIsImVtYWlsIjoibWFuYXdhcmRoYW5hKzFAZ21haWwuY29tIiwibW9iaWxlLXBob25lIjoiMDQ1NzkyNTI4MCIsImV4cGlyeSI6IlR1ZSwgMjEgRmViIDIwMjMgMTY6MjY6MzggR01UIn0.uxnFmnV8gszaYqtli74sPjLWwIQJBZv-Tad1BzAFPP8' \;-H 'Content-Type: application/json' \;-d '{"requested-by":1, "apt-date":"2023-03-27", "booking-option":"MORNING", "requesters-comments":"Please"}'